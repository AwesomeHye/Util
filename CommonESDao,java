package kr.co.saramin.lab.searchevaluator.dao;

import com.google.gson.internal.$Gson$Types;
import lombok.RequiredArgsConstructor;
import org.elasticsearch.common.unit.TimeValue;
import org.springframework.data.elasticsearch.core.ElasticsearchOperations;
import org.springframework.data.elasticsearch.core.ScrolledPage;
import org.springframework.data.elasticsearch.core.query.SearchQuery;
import org.springframework.stereotype.Repository;

@Repository
@RequiredArgsConstructor
public class CommonESDao {
    final long SCROLL_TIME_IN_MILLIS = TimeValue.timeValueMinutes(1L).getMillis(); // 60000
    public final ElasticsearchOperations esOperations;

    public <T> ScrolledPage<T> startScroll(SearchQuery searchQuery, Class<T> clazz){
        return esOperations.startScroll(SCROLL_TIME_IN_MILLIS, searchQuery, clazz);
    }

    public <T> ScrolledPage<T> continueScroll(String scrollId, Class<T> clazz){
        return esOperations.continueScroll(scrollId, SCROLL_TIME_IN_MILLIS, clazz);
    }

    public void clearScroll(String scrollId){
        esOperations.clearScroll(scrollId);
    }
    
       /**
     * 인덱스 생성 후 필드 매핑
     * @param indexName
     * @param indexType
     * @param clazz
     * @param <T>
     * @return
     */
    public <T> boolean createAndMappingIndex(String indexName, String indexType, Class<T> clazz){
        return esOperations.createIndex(indexName, clazz) &&
                esOperations.putMapping(indexName, indexType, clazz);
    }

    /**
     * aliasName 의 설정된 모든 인덱스 제거 후 indexName 만 add
     * @param aliasName
     * @param indexName
     */
    public boolean replaceAlias(String aliasName, String indexName){
        AliasQuery clearAliasQuery = new AliasBuilder().withAliasName(aliasName).withIndexName("*").build();
        try {
            esOperations.removeAlias(clearAliasQuery);
        } catch (ElasticsearchStatusException e){
            // aliases_not_found_exception - nothing to do
        }
        AliasQuery addAliasQuery = new AliasBuilder().withAliasName(aliasName).withIndexName(indexName).build();
        return esOperations.addAlias(addAliasQuery);
    }
}
